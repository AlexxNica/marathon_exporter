package main

import (
	"fmt"

	"sort"
	"strings"

	"github.com/prometheus/client_golang/prometheus"
)

const (
	defaultHelp = "Metric autogenerated by marathon_exporter."
)

type CounterContainer struct {
	counters map[string]prometheus.Counter
}

func NewCounterContainer() *CounterContainer {
	return &CounterContainer{
		counters: make(map[string]prometheus.Counter),
	}
}

func (c *CounterContainer) GetOrCreate(metricName string, labels prometheus.Labels) prometheus.Counter {
	key := containerKey(metricName, labels)
	counter, ok := c.counters[key]

	if !ok {
		counter = prometheus.NewCounter(prometheus.CounterOpts{
			Namespace:   namespace,
			Name:        metricName,
			Help:        defaultHelp,
			ConstLabels: labels,
		})

		c.counters[key] = counter
	}

	return counter
}

func containerKey(metric string, labels prometheus.Labels) string {
	labelNames := make([]string, 0, len(labels))
	for name := range labels {
		labelNames = append(labelNames, name)
	}

	sort.Strings(labelNames)
	return fmt.Sprintf("%s{%v}", metric, strings.Join(labelNames, ","))
}
